// Public API for CSG library
#include <Eigen/Core>
#include <Eigen/StdVector>
#include <string>

#include "trimesh.h"

namespace CSG
{

enum TriTriIntersectionType
{
   kPointPoint,
   kPointEdge,
   kEdgeEdge
};

enum CSGOperation
{
   kInterection,
   kUnion,
   kDifference
};

enum IParent
{
   kClay,
   kKnife,
   kBoth,
   kNew
};


// Structure to contain points generated by triangle-triangle intersections
class IPoint
{
 public:
   Eigen::Vector3d pos;
   IParent parent;
   uint32_t p_idx;  // index into parent face (if applicable)

   // Indicies of triangles that created this point
   uint32_t cidx;
   uint32_t kidx;
};


// An IFace is a triangle face that uses IPoints
class IFace
{
public:
   
};


class TriangleIntersection
{
 public:
   friend std::ostream& operator<<(std::ostream& os, const TriangleIntersection& ix)
   {
      if (!ix.intersect)
      {
         os << "no intersection";
      }
      else
      {
         os << "intersection. ";
         if (ix.coplanar)
            os << "coplanar. ";
         os << "p0: [" << ix.p[0][0] << ", " << ix.p[0][1] << ", " << ix.p[0][2] << "]  "
            << "p1: [" << ix.p[1][0] << ", " << ix.p[1][1] << ", " << ix.p[1][2] << "]  ";
         os << "alpha:" << ix.alpha << "  beta:" << ix.beta;
      }
      return os;
   }

   bool intersect;        // is there an intersection at all?
   bool coplanar;         // are the triangles coplanar
   Eigen::Vector3d p[2];  // the two points defining the line of intersection
   double alpha;          // clay points
   double beta;           // knife points
};


// Intersect two triangles (A and B) and return informtation on their line of
// intersection, if any
TriangleIntersection intersect(
    const Triangle& tri_a,
    const std::vector<Eigen::Vector3d, Eigen::aligned_allocator<Eigen::Vector3d>>& verts_a,
    const Triangle& tri_b,
    const std::vector<Eigen::Vector3d, Eigen::aligned_allocator<Eigen::Vector3d>>& verts_b);

void CSG(const TriMesh& clay, const TriMesh& knife, CSGOperation operation, TriMesh& A, TriMesh& B);


}  //namespace CSG
